//// Created by hlx on 2023/10/4.//#include <cstdio>#include <cstdlib>#include <cstring>#include "common.h"#include "compiler.h"#include "scanner.h"#include "memory.h"#include "object.h"#include <functional>#ifdef DEBUG_PRINT_CODE#include "debug.h"#endifnamespace cpplox {    // 解析器    struct Parser {        Token current;      // 当前token        Token previous;     // 前一个token        bool hadError;      // 提前记录是否有异常        bool panicMode;     // 是否处于恐慌模式    };    // 优先级枚举 优先级从低到高    enum Precedence {        PREC_NONE,        PREC_ASSIGNMENT,  // =        PREC_OR,          // or        PREC_AND,         // and        PREC_EQUALITY,    // == !=        PREC_COMPARISON,  // < > <= >=        PREC_TERM,        // + -        PREC_FACTOR,      // * /        PREC_UNARY,       // ! -        PREC_CALL,        // . ()        PREC_PRIMARY    };    // 局部变量    struct Local {        Token name;         // 变量名        int depth;          // 作用域深度        bool isCaptured;    // 是否被捕获    };    // 提升值    struct Upvalue {        uint8_t index;  // 提示值索引        bool isLocal;   // 是否为局部变量    };    // 函数类型    enum FunctionType {        TYPE_FUNCTION,      // 正常函数        TYPE_INITIALIZER,   // 构造函数        TYPE_METHOD,        // 方法        TYPE_SCRIPT         // 主执行体    };    // 编译器    struct Compiler {        Compiler *enclosing;     // 上一个编译器 用来还原current        ObjFunction *function;          // 当前编译函数对象        FunctionType type;              // 当前函数类型        Local locals[UINT8_COUNT];      // 局部变量数组        int localCount;                 // 局部变量数量        Upvalue upvalues[UINT8_COUNT];  // 提升值数组        int scopeDepth;                 // 局部变量作用域深度        explicit Compiler(FunctionType type);        void advance();        void errorAtCurrent(const char *message);        void errorAt(Token *token, const char *message);        void error(const char *message);        void consume(TokenType type, const char *message);        bool match(TokenType type);        void emitByte(uint8_t byte);        void emitBytes(uint8_t byte1, uint8_t byte2);        void emitLoop(int loopStart);        int emitJump(uint8_t instruction);        void emitReturn();        uint8_t makeConstant(Value value);        void emitConstant(Value value);        void patchJump(int offset);        ObjFunction *endCompiler();        void beginScope();        void endScope();        uint8_t identifierConstant(Token *name);        bool identifiersEqual(Token *a, Token *b);        int resolveLocal(Compiler *compiler, Token *name);        int addUpvalue(Compiler *compiler, uint8_t index, bool isLocal);        int resolveUpvalue(Compiler *compiler, Token *name);        void addLocal(Token name);        void declareVariable();        uint8_t parseVariable(const char *errorMessage);        void markInitialized();        void defineVariable(uint8_t global);        uint8_t argumentList();        void and_(bool canAssign);        void binary(bool canAssign);        void call(bool canAssign);        void dot(bool canAssign);        void literal(bool canAssign);        void grouping(bool canAssign);        void number(bool canAssign);        void or_(bool canAssign);        void string(bool canAssign);        void namedVariable(Token name, bool canAssign);        void variable(bool canAssign);        Token syntheticToken(const char *text);        void super_(bool canAssign);        void this_(bool canAssign);        void unary(bool canAssign);        void parsePrecedence(Precedence precedence);        void expression();        void block();        void function_(FunctionType type);        void method();        void funDeclaration();        void classDeclaration();        void varDeclaration();        void expressionStatement();        void forStatement();        void ifStatement();        void printStatement();        void returnStatement();        void whileStatement();        void synchronize();        void declaration();        void statement();    };    using ParseFn = void (Compiler::*)(bool);    // 解析规则    struct ParseRule {        ParseFn prefix;         // 前缀        ParseFn infix;          // 中缀        Precedence precedence;  // 优先级    };    static ParseRule rules[] = {            [TOKEN_LEFT_PAREN]    = {&Compiler::grouping, &Compiler::call, PREC_CALL},            [TOKEN_RIGHT_PAREN]   = {nullptr, nullptr, PREC_NONE},            [TOKEN_LEFT_BRACE]    = {nullptr, nullptr, PREC_NONE},            [TOKEN_RIGHT_BRACE]   = {nullptr, nullptr, PREC_NONE},            [TOKEN_COMMA]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_DOT]           = {nullptr, &Compiler::dot, PREC_CALL},            [TOKEN_MINUS]         = {&Compiler::unary, &Compiler::binary, PREC_TERM},            [TOKEN_PLUS]          = {nullptr, &Compiler::binary, PREC_TERM},            [TOKEN_SEMICOLON]     = {nullptr, nullptr, PREC_NONE},            [TOKEN_SLASH]         = {nullptr, &Compiler::binary, PREC_FACTOR},            [TOKEN_STAR]          = {nullptr, &Compiler::binary, PREC_FACTOR},            [TOKEN_BANG]          = {&Compiler::unary, nullptr, PREC_NONE},            [TOKEN_BANG_EQUAL]    = {nullptr, &Compiler::binary, PREC_EQUALITY},            [TOKEN_EQUAL]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_EQUAL_EQUAL]   = {nullptr, &Compiler::binary, PREC_EQUALITY},            [TOKEN_GREATER]       = {nullptr, &Compiler::binary, PREC_COMPARISON},            [TOKEN_GREATER_EQUAL] = {nullptr, &Compiler::binary, PREC_COMPARISON},            [TOKEN_LESS]          = {nullptr, &Compiler::binary, PREC_COMPARISON},            [TOKEN_LESS_EQUAL]    = {nullptr, &Compiler::binary, PREC_COMPARISON},            [TOKEN_IDENTIFIER]    = {&Compiler::variable, nullptr, PREC_NONE},            [TOKEN_STRING]        = {&Compiler::string, nullptr, PREC_NONE},            [TOKEN_NUMBER]        = {&Compiler::number, nullptr, PREC_NONE},            [TOKEN_AND]           = {nullptr, &Compiler::and_, PREC_AND},            [TOKEN_CLASS]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_ELSE]          = {nullptr, nullptr, PREC_NONE},            [TOKEN_FALSE]         = {&Compiler::literal, nullptr, PREC_NONE},            [TOKEN_FOR]           = {nullptr, nullptr, PREC_NONE},            [TOKEN_FUN]           = {nullptr, nullptr, PREC_NONE},            [TOKEN_IF]            = {nullptr, nullptr, PREC_NONE},            [TOKEN_NIL]           = {&Compiler::literal, nullptr, PREC_NONE},            [TOKEN_OR]            = {nullptr, &Compiler::or_, PREC_OR},            [TOKEN_PRINT]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_RETURN]        = {nullptr, nullptr, PREC_NONE},            [TOKEN_SUPER]         = {&Compiler::super_, nullptr, PREC_NONE},            [TOKEN_THIS]          = {&Compiler::this_, nullptr, PREC_NONE},            [TOKEN_TRUE]          = {&Compiler::literal, nullptr, PREC_NONE},            [TOKEN_VAR]           = {nullptr, nullptr, PREC_NONE},            [TOKEN_WHILE]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_ERROR]         = {nullptr, nullptr, PREC_NONE},            [TOKEN_EOF]           = {nullptr, nullptr, PREC_NONE},    };    static ParseRule* getRule(TokenType type){        return &rules[type];    }    // 类编译器    struct ClassCompiler {        struct ClassCompiler *enclosing;    // 上一个类编译器        bool hasSuperclass;                 // 是否存在父类    };    Scanner *scanner = nullptr;    // 单例解析器    Parser parser;    // 当前编译器    Compiler *current = nullptr;    // 当前类编译器    ClassCompiler *currentClass = nullptr;    // 返回当前编译的字节码块    static Chunk *currentChunk() {        return current->function->chunk;    }    Compiler::Compiler(FunctionType type) {        // 上一个编译器  编译结束时current 回退回去        this->enclosing = current;        this->function = nullptr;        this->type = type;        this->localCount = 0;        this->scopeDepth = 0;        // function type 为script        this->function = newFunction();        current = this;        if (type != TYPE_SCRIPT) {            current->function->name = copyString(std::string(parser.previous.start, parser.previous.length));        }        // 局部插槽将空字符串占用 无法显式使用        Local *local = &current->locals[current->localCount++];        local->depth = 0;        local->isCaptured = false;        if (type != TYPE_FUNCTION) {            local->name.start = "this";            local->name.length = 4;        } else {            local->name.start = "";            local->name.length = 0;        }    }    void Compiler::advance() {        parser.previous = parser.current;        for (;;) {            parser.current = scanner->scanToken();            if (parser.current.type != TOKEN_ERROR) break;            errorAtCurrent(parser.current.start);        }    }    void Compiler::errorAtCurrent(const char *message) {        errorAt(&parser.current, message);    }    void Compiler::errorAt(Token *token, const char *message) {        // 处于恐慌模式时抑制其它错误        if (parser.panicMode) return;        parser.panicMode = true;        fprintf(stderr, "[line %d] Error", token->line);        if (token->type == TOKEN_EOF) {            fprintf(stderr, " at end");        } else if (token->type == TOKEN_ERROR) {            // Nothing.        } else {            fprintf(stderr, " at '%.*s'", token->length, token->start);        }        fprintf(stderr, ": %s\n", message);        parser.hadError = true;    }    void Compiler::error(const char *message) {        errorAt(&parser.previous, message);    }    void Compiler::consume(TokenType type_, const char *message) {        if (parser.current.type == type_) {            advance();            return;        }        errorAtCurrent(message);    }    // 检查当前token是匹配该类型    static bool check(TokenType type) {        return parser.current.type == type;    }    bool Compiler::match(TokenType type_) {        if (!check(type_)) return false;        advance();        return true;    }    void Compiler::emitByte(uint8_t byte) {        currentChunk()->write(byte, parser.previous.line);    }    void Compiler::emitBytes(uint8_t byte1, uint8_t byte2) {        emitByte(byte1);        emitByte(byte2);    }    void Compiler::emitLoop(int loopStart) {        emitByte(OP_LOOP);        int offset = (int) (currentChunk()->code.size()) - loopStart + 2;        if (offset > UINT16_MAX) error("Loop body too large.");        emitByte((offset >> 8) & 0xff);        emitByte(offset & 0xff);    }    int Compiler::emitJump(uint8_t instruction) {        emitByte(instruction);        emitByte(0xff);        emitByte(0xff);        return (int) (currentChunk()->code.size()) - 2;    }    void Compiler::emitReturn() {        if (current->type == TYPE_INITIALIZER) {            emitBytes(OP_GET_LOCAL, 0);        } else {            emitByte(OP_NIL);        }        emitByte(OP_RETURN);    }    uint8_t Compiler::makeConstant(Value value) {        int constant = currentChunk()->addConstant(value);        if (constant > UINT8_MAX) {            error("Too many constants in one chunk.");            return 0;        }        return (uint8_t) constant;    }    void Compiler::emitConstant(Value value) {        emitBytes(OP_CONSTANT, makeConstant(value));    }    void Compiler::patchJump(int offset) {        // -offset得到 字节指令的位置  -2 再得到then语句的位置        int jump = (int) (currentChunk()->code.size()) - offset - 2;        // 最大只能跳转两个字节的字节码        if (jump > UINT16_MAX) {            error("Too much code to jump over.");        }        // 回写需要跳过的大小        currentChunk()->code[offset] = (jump >> 8) & 0xff;        currentChunk()->code[offset + 1] = jump & 0xff;    }    ObjFunction *Compiler::endCompiler() {        emitReturn();        ObjFunction *function_ = current->function;#ifdef DEBUG_PRINT_CODE        if (!parser.hadError) {            disassembleChunk(currentChunk(), function_->name != nullptr                                             ? function_->name->chars->c_str() : "<script>");        }#endif        // 编译结束还原 上个编译器        current = current->enclosing;        return function_;    }    void Compiler::beginScope() {        current->scopeDepth++;    }    void Compiler::endScope() {        current->scopeDepth--;        while (current->localCount > 0 &&               current->locals[current->localCount - 1].depth > current->scopeDepth) {            // 被捕获的需要推送到闭包            if (current->locals[current->localCount - 1].isCaptured) {                emitByte(OP_CLOSE_UPVALUE);            } else {                emitByte(OP_POP);            }            current->localCount--;        }    }    uint8_t Compiler::identifierConstant(Token *name) {        return makeConstant(OBJ_VAL(copyString(std::string(name->start, name->length))));    }    bool Compiler::identifiersEqual(Token *a, Token *b) {        if (a->length != b->length) return false;        return memcmp(a->start, b->start, a->length) == 0;    }    int Compiler::resolveLocal(Compiler *compiler, Token *name) {        for (int i = compiler->localCount - 1; i >= 0; i--) {            Local *local = &compiler->locals[i];            if (identifiersEqual(name, &local->name)) {                if (local->depth == -1) {                    error("Can't read local variable in its own initializer.");                }                return i;            }        }        return -1;    }    int Compiler::addUpvalue(Compiler *compiler, uint8_t index, bool isLocal) {        int upvalueCount = compiler->function->upvalueCount;        for (int i = 0; i < upvalueCount; i++) {            Upvalue *upvalue = &compiler->upvalues[i];            if (upvalue->index == index && upvalue->isLocal == isLocal) {                return i;            }        }        if (upvalueCount == UINT8_COUNT) {            error("Too many closure variables in function.");            return 0;        }        compiler->upvalues[upvalueCount].isLocal = isLocal;        compiler->upvalues[upvalueCount].index = index;        return compiler->function->upvalueCount++;    }    int Compiler::resolveUpvalue(Compiler *compiler, Token *name) {        if (compiler->enclosing == nullptr) return -1;        int local = resolveLocal(compiler->enclosing, name);        if (local != -1) {            compiler->enclosing->locals[local].isCaptured = true;            return addUpvalue(compiler, (uint8_t) local, true);        }        int upvalue = resolveUpvalue(compiler->enclosing, name);        if (upvalue != -1) {            return addUpvalue(compiler, (uint8_t) upvalue, false);        }        return -1;    }    void Compiler::addLocal(Token name) {        if (current->localCount == UINT8_COUNT) {            error("Too many local variables in function.");            return;        }        Local *local = &current->locals[current->localCount++];        local->name = name;        local->depth = -1;        local->isCaptured = false;    }    void Compiler::declareVariable() {        if (current->scopeDepth == 0) return;        Token *name = &parser.previous;        for (int i = current->localCount - 1; i >= 0; i--) {            Local *local = &current->locals[i];            if (local->depth != -1 && local->depth < current->scopeDepth) {                break;            }            if (identifiersEqual(name, &local->name)) {                error("Already a variable with this name in this scope.");            }        }        addLocal(*name);    }    uint8_t Compiler::parseVariable(const char *errorMessage) {        consume(TOKEN_IDENTIFIER, errorMessage);        declareVariable();        if (current->scopeDepth > 0) return 0;        return identifierConstant(&parser.previous);    }    void Compiler::markInitialized() {        // 全局函数声明时没必要标记        if (current->scopeDepth == 0) return;        current->locals[current->localCount - 1].depth = current->scopeDepth;    }    void Compiler::defineVariable(uint8_t global) {        if (current->scopeDepth > 0) {            markInitialized();            return;        }        emitBytes(OP_DEFINE_GLOBAL, global);    }    uint8_t Compiler::argumentList() {        uint8_t argCount = 0;        if (!check(TOKEN_RIGHT_PAREN)) {            do {                expression();                if (argCount == 255) {                    error("Can't have more than 255 arguments.");                }                argCount++;            } while (match(TOKEN_COMMA));        }        consume(TOKEN_RIGHT_PAREN, "Expect ')' after arguments.");        return argCount;    }    void Compiler::and_(bool canAssign) {        int endJump = emitJump(OP_JUMP_IF_FALSE);        emitByte(OP_POP);        parsePrecedence(PREC_AND);        patchJump(endJump);    }    void Compiler::binary(bool canAssign) {        TokenType operatorType = parser.previous.type;        ParseRule* rule = getRule(operatorType);        parsePrecedence((Precedence) (rule->precedence + 1));        switch (operatorType) {            case TOKEN_BANG_EQUAL:                emitBytes(OP_EQUAL, OP_NOT);                break;            case TOKEN_EQUAL_EQUAL:                emitByte(OP_EQUAL);                break;            case TOKEN_GREATER:                emitByte(OP_GREATER);                break;            case TOKEN_GREATER_EQUAL:                emitBytes(OP_LESS, OP_NOT);                break;            case TOKEN_LESS:                emitByte(OP_LESS);                break;            case TOKEN_LESS_EQUAL:                emitBytes(OP_GREATER, OP_NOT);                break;            case TOKEN_PLUS:                emitByte(OP_ADD);                break;            case TOKEN_MINUS:                emitByte(OP_SUBTRACT);                break;            case TOKEN_STAR:                emitByte(OP_MULTIPLY);                break;            case TOKEN_SLASH:                emitByte(OP_DIVIDE);                break;            default:                return; // Unreachable.        }    }    void Compiler::call(bool canAssign) {        uint8_t argCount = argumentList();        emitBytes(OP_CALL, argCount);    }    void Compiler::dot(bool canAssign) {        consume(TOKEN_IDENTIFIER, "Expect property name after '.'.");        uint8_t name = identifierConstant(&parser.previous);        if (canAssign && match(TOKEN_EQUAL)) {            expression();            emitBytes(OP_SET_PROPERTY, name);        } else if (match(TOKEN_LEFT_PAREN)) {            uint8_t argCount = argumentList();            emitBytes(OP_INVOKE, name);            emitByte(argCount);        } else {            emitBytes(OP_GET_PROPERTY, name);        }    }    void Compiler::literal(bool canAssign) {        switch (parser.previous.type) {            case TOKEN_FALSE:                emitByte(OP_FALSE);                break;            case TOKEN_NIL:                emitByte(OP_NIL);                break;            case TOKEN_TRUE:                emitByte(OP_TRUE);                break;            default:                return; // Unreachable.        }    }    void Compiler::grouping(bool canAssign) {        expression();        consume(TOKEN_RIGHT_PAREN, "Expect ')' after expression.");    }    void Compiler::number(bool canAssign) {        double value = strtod(parser.previous.start, nullptr);        emitConstant(NUMBER_VAL(value));    }    void Compiler::or_(bool canAssign) {        int elseJump = emitJump(OP_JUMP_IF_FALSE);        int endJump = emitJump(OP_JUMP);        patchJump(elseJump);        emitByte(OP_POP);        parsePrecedence(PREC_OR);        patchJump(endJump);    }    void Compiler::string(bool canAssign) {        emitConstant(OBJ_VAL(copyString(std::string(parser.previous.start + 1,                                                    parser.previous.length - 2))));    }    void Compiler::namedVariable(Token name, bool canAssign) {        uint8_t getOp, setOp;        int arg = resolveLocal(current, &name);        if (arg != -1) {            getOp = OP_GET_LOCAL;            setOp = OP_SET_LOCAL;        } else if ((arg = resolveUpvalue(current, &name)) != -1) {            getOp = OP_GET_UPVALUE;            setOp = OP_SET_UPVALUE;        } else {            arg = identifierConstant(&name);            getOp = OP_GET_GLOBAL;            setOp = OP_SET_GLOBAL;        }        // 接等号为赋值  反之为取值        if (canAssign && match(TOKEN_EQUAL)) {            expression();            emitBytes(setOp, (uint8_t) arg);        } else {            emitBytes(getOp, (uint8_t) arg);        }    }    void Compiler::variable(bool canAssign) {        namedVariable(parser.previous, canAssign);    }    Token Compiler::syntheticToken(const char *text) {        Token token;        token.start = text;        token.length = (int) strlen(text);        return token;    }    void Compiler::super_(bool canAssign) {        if (currentClass == nullptr) {            error("Can't use 'super' outside of a class.");        } else if (!currentClass->hasSuperclass) {            error("Can't use 'super' in a class with no superclass.");        }        consume(TOKEN_DOT, "Expect '.' after 'super'.");        consume(TOKEN_IDENTIFIER, "Expect superclass method name.");        uint8_t name = identifierConstant(&parser.previous);        namedVariable(syntheticToken("this"), false);        if (match(TOKEN_LEFT_PAREN)) {            uint8_t argCount = argumentList();            namedVariable(syntheticToken("super"), false);            emitBytes(OP_SUPER_INVOKE, name);            emitByte(argCount);        } else {            namedVariable(syntheticToken("super"), false);            emitBytes(OP_GET_SUPER, name);        }    }    void Compiler::this_(bool canAssign) {        if (currentClass == nullptr) {            error("Can't use 'this' outside of a class.");            return;        }        variable(false);    }    void Compiler::unary(bool canAssign) {        TokenType operatorType = parser.previous.type;        // Compile the operand.        parsePrecedence(PREC_UNARY);        // Emit the operator instruction.        switch (operatorType) {            case TOKEN_BANG:                emitByte(OP_NOT);                break;            case TOKEN_MINUS:                emitByte(OP_NEGATE);                break;            default:                return; // Unreachable.        }    }    void Compiler::parsePrecedence(Precedence precedence) {        advance();        // 获取上一格token的前缀表达式 为null的话错误        ParseFn prefixRule = getRule(parser.previous.type)->prefix;        if (prefixRule == nullptr) {            error("Expect expression.");            return;        }        // 执行前缀表达式  传入等号的优先级表示是否能赋值        bool canAssign = precedence <= PREC_ASSIGNMENT;        ((*current).*prefixRule)(canAssign);        // 获取当前token优先级 比较传递进的优先级 传递小于等于当前的话 执行中缀表达式        while (precedence <= getRule(parser.current.type)->precedence) {            advance();            ParseFn infixRule = getRule(parser.previous.type)->infix;            ((*current).*infixRule)(canAssign);        }        // 可以赋值且后接等号        if (canAssign && match(TOKEN_EQUAL)) {            error("Invalid assignment target.");        }    }    void Compiler::expression() {        parsePrecedence(PREC_ASSIGNMENT);    }    void Compiler::block() {        while (!check(TOKEN_RIGHT_BRACE) && !check(TOKEN_EOF)) {            declaration();        }        consume(TOKEN_RIGHT_BRACE, "Expect '}' after block.");    }    void Compiler::function_(FunctionType type_) {        Compiler compiler(type_);        beginScope();        // 函数参数        consume(TOKEN_LEFT_PAREN, "Expect '(' after function name.");        if (!check(TOKEN_RIGHT_PAREN)) {            do {                current->function->arity++;                if (current->function->arity > 255) {                    errorAtCurrent("Can't have more than 255 parameters.");                }                uint8_t constant = parseVariable("Expect parameter name.");                defineVariable(constant);            } while (match(TOKEN_COMMA));        }        consume(TOKEN_RIGHT_PAREN, "Expect ')' after parameters.");        consume(TOKEN_LEFT_BRACE, "Expect '{' before function body.");        block();        ObjFunction *function = endCompiler();        emitBytes(OP_CLOSURE, makeConstant(OBJ_VAL(function)));        for (int i = 0; i < function->upvalueCount; i++) {            emitByte(compiler.upvalues[i].isLocal ? 1 : 0);            emitByte(compiler.upvalues[i].index);        }    }    void Compiler::method() {        consume(TOKEN_IDENTIFIER, "Expect method name.");        uint8_t constant = identifierConstant(&parser.previous);        FunctionType type_ = TYPE_METHOD;        if (parser.previous.length == 4 && memcmp(parser.previous.start, "init", 4) == 0) {            type_ = TYPE_INITIALIZER;        }        function_(type_);        emitBytes(OP_METHOD, constant);    }    void Compiler::funDeclaration() {        uint8_t global = parseVariable("Expect function name.");        markInitialized();        function_(TYPE_FUNCTION);        defineVariable(global);    }    void Compiler::classDeclaration() {        consume(TOKEN_IDENTIFIER, "Expect class name.");        Token className = parser.previous;        uint8_t nameConstant = identifierConstant(&parser.previous);        declareVariable();        emitBytes(OP_CLASS, nameConstant);        defineVariable(nameConstant);        ClassCompiler classCompiler;        classCompiler.hasSuperclass = false;        classCompiler.enclosing = currentClass;        currentClass = &classCompiler;        // 继承        if (match(TOKEN_LESS)) {            consume(TOKEN_IDENTIFIER, "Expect superclass name.");            variable(false);            if (identifiersEqual(&className, &parser.previous)) {                error("A class can't inherit from itself.");            }            beginScope();            addLocal(syntheticToken("super"));            defineVariable(0);            namedVariable(className, false);            emitByte(OP_INHERIT);            classCompiler.hasSuperclass = true;        }        namedVariable(className, false);        consume(TOKEN_LEFT_BRACE, "Expect '{' before class body.");        while (!check(TOKEN_RIGHT_BRACE) && !check(TOKEN_EOF)) {            method();        }        consume(TOKEN_RIGHT_BRACE, "Expect '}' after class body.");        emitByte(OP_POP);        if (classCompiler.hasSuperclass) {            endScope();        }        currentClass = currentClass->enclosing;    }    void Compiler::varDeclaration() {        uint8_t global = parseVariable("Expect variable name.");        if (match(TOKEN_EQUAL)) {            expression();        } else {            emitByte(OP_NIL);        }        consume(TOKEN_SEMICOLON, "Expect ';' after variable declaration.");        defineVariable(global);    }    void Compiler::expressionStatement() {        expression();        consume(TOKEN_SEMICOLON, "Expect ';' after expression.");        emitByte(OP_POP);    }    void Compiler::forStatement() {        beginScope();        consume(TOKEN_LEFT_PAREN, "Expect '(' after 'for'.");        // for 第一语句 只执行一次        if (match(TOKEN_SEMICOLON)) {            // No initializer.        } else if (match(TOKEN_VAR)) {            varDeclaration();        } else {            expressionStatement();        }        // 循环起点        int loopStart = (int) (currentChunk()->code.size());        // for的第二语句  表达式语句        int exitJump = -1;        if (!match(TOKEN_SEMICOLON)) {            expression();            consume(TOKEN_SEMICOLON, "Expect ';' after loop condition.");            // Jump out of the loop if the condition is false.            exitJump = emitJump(OP_JUMP_IF_FALSE);            emitByte(OP_POP); // Condition.        }        // for的第三语句 增量子句        if (!match(TOKEN_RIGHT_PAREN)) {            int bodyJump = emitJump(OP_JUMP);            int incrementStart = (int) (currentChunk()->code.size());            expression();            emitByte(OP_POP);            consume(TOKEN_RIGHT_PAREN, "Expect ')' after for clauses.");            emitLoop(loopStart);            loopStart = incrementStart;            patchJump(bodyJump);        }        // for 主体        statement();        emitLoop(loopStart);        // 修复跳跃        if (exitJump != -1) {            patchJump(exitJump);            emitByte(OP_POP);        }        endScope();    }    void Compiler::ifStatement() {        consume(TOKEN_LEFT_PAREN, "Expect '(' after 'if'.");        expression();        consume(TOKEN_RIGHT_PAREN, "Expect ')' after condition.");        // then 分支跳转点        int thenJump = emitJump(OP_JUMP_IF_FALSE);        // 如果为false 这个 pop不会被执行  会执行下面的pop        // 如果为 true 执行这个pop之后 跳过实体else 或者空else(只有一个pop)        // 弹出条件表达式        emitByte(OP_POP);        statement();        // else 分支跳转点        int elseJump = emitJump(OP_JUMP);        // 回写then分支跳转的长度回写        patchJump(thenJump);        // 弹出条件表达式        emitByte(OP_POP);        // then 分支过后探查 是否有else 这个if不触发的话则跳转一个 空else        if (match(TOKEN_ELSE)) statement();        // else分支跳转长度回写        patchJump(elseJump);    }    void Compiler::printStatement() {        expression();        consume(TOKEN_SEMICOLON, "Expect ';' after value.");        emitByte(OP_PRINT);    }    void Compiler::returnStatement() {        if (current->type == TYPE_SCRIPT) {            error("Can't return from top-level code.");        }        if (match(TOKEN_SEMICOLON)) {            emitReturn();        } else {            if (current->type == TYPE_INITIALIZER) {                error("Can't return a value from an initializer.");            }            expression();            consume(TOKEN_SEMICOLON, "Expect ';' after return value.");            emitByte(OP_RETURN);        }    }    void Compiler::whileStatement() {        // 循环起点        int loopStart = (int) (currentChunk()->code.size());        consume(TOKEN_LEFT_PAREN, "Expect '(' after 'while'.");        expression();        consume(TOKEN_RIGHT_PAREN, "Expect ')' after condition.");        // 如果为false直接跳到下面的pop        int exitJump = emitJump(OP_JUMP_IF_FALSE);        emitByte(OP_POP);        statement();        // 循环节点        emitLoop(loopStart);        patchJump(exitJump);        // false的跳入点        emitByte(OP_POP);    }    void Compiler::synchronize() {        parser.panicMode = false;        while (parser.current.type != TOKEN_EOF) {            if (parser.previous.type == TOKEN_SEMICOLON) return;            switch (parser.current.type) {                case TOKEN_CLASS:                case TOKEN_FUN:                case TOKEN_VAR:                case TOKEN_FOR:                case TOKEN_IF:                case TOKEN_WHILE:                case TOKEN_PRINT:                case TOKEN_RETURN:                    return;                default:; // Do nothing.            }            current->advance();        }    }    void Compiler::declaration() {        if (match(TOKEN_CLASS)) {            classDeclaration();        } else if (match(TOKEN_FUN)) {            funDeclaration();        } else if (match(TOKEN_VAR)) {            varDeclaration();        } else {            statement();        }        // 如果处于异常模式  则同步掉异常继续编译        if (parser.panicMode) synchronize();    }    void Compiler::statement() {        if (match(TOKEN_PRINT)) {            printStatement();        } else if (match(TOKEN_FOR)) {            forStatement();        } else if (match(TOKEN_IF)) {            ifStatement();        } else if (match(TOKEN_RETURN)) {            returnStatement();        } else if (match(TOKEN_WHILE)) {            whileStatement();        } else if (match(TOKEN_LEFT_BRACE)) {            beginScope();            block();            endScope();        } else {            expressionStatement();        }    }    // 执行编译    ObjFunction *compile(const char *source) {        scanner = new Scanner(source);        Compiler compiler(TYPE_SCRIPT);        parser.hadError = false;        parser.panicMode = false;        compiler.advance();        while (!compiler.match(TOKEN_EOF)) {            compiler.declaration();        }        ObjFunction *function = compiler.endCompiler();        delete scanner;        scanner = nullptr;        return parser.hadError ? nullptr : function;    }    void markCompilerRoots() {        Compiler *compiler = current;        while (compiler != nullptr) {            markObject((Obj *) compiler->function);            compiler = compiler->enclosing;        }    }}